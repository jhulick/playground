@Library('nc-devops-pipeline-shared-libraries') _

pipeline {
    agent any
    parameters {
        string defaultValue: '', description: 'Label that master branch will be tagged, should follow semantic versioning guidelines', name: 'TAG_VERSION', trim: true
        string defaultValue: 'Master branch update', description: 'Commit message for tag.', name: 'TAG_MESSAGE', trim: true
        string defaultValue: 'Changelog update', description: 'Commit message for wiki.', name: 'WIKI_MESSAGE', trim: true
    }


    stages {
        stage('Parameters validation') {
            steps {
                script {
                    if (areParametersValid(params.TAG_VERSION, params.TAG_MESSAGE, params.WIKI_MESSAGE)) {
                        checkIfTagIsInUse(params.TAG_VERSION)
                    } else {
                        error("""Parameters not valid:
TAG_VERSION = \'${params.TAG_VERSION}\' - cannot be empty and must follow semantic versioning standards
TAG_MESSAGE = \'${params.TAG_MESSAGE}\' - cannot be empty
WIKI_MESSAGE = \'${params.WIKI_MESSAGE}\' - cannot be empty""")
                    }
                }
            }
        }

        stage('Checkout repository') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'nc-devops-credentials', url: 'ssh://source.netcompany.com:22/tfs/Netcompany/NCCGV001/_git/nc-devops-pipeline-shared-libraries']]])
                script {
                    sshagent(credentials: ["nc-devops-credentials"]) {
                        sh label: 'Merge develop into master',
                                script: """git merge --no-ff origin/develop
        git tag -a \'${params.TAG_VERSION}\' -m \'${params.TAG_MESSAGE}\'
        git push origin HEAD:master
        git push origin \'${params.TAG_VERSION}\'"""
                    }
                }
            }
        }

        stage('Publish artifact') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nc-dvo-writer-credentials', usernameVariable: 'PUBLISH_USERNAME', passwordVariable: 'PUBLISH_PASSWORD')]) {
                        sh script: """./gradlew publish -Pversion=\'${params.TAG_VERSION}\' -DbinaryRepoUsername=${PUBLISH_USERNAME} -DbinaryRepoPassword=${PUBLISH_PASSWORD}"""
                    }
                }
            }
        }

        stage('Prepare and publish changelog') {
            steps {
                script {
                    sshagent(credentials: ["nc-devops-credentials"]) {
                        def changelogConfig = [changelogCompareRepository: "ssh://source.netcompany.com:22/tfs/Netcompany/NCCGV001/_git/nc-devops-pipeline-shared-libraries",
                                               changelogOutputDirectory  : "release-notes/nc_devops_pipeline_shared_libraries"]
                        changelogGenerationStep(changelogConfig)
                    }
                }
            }
        }
    }
}

boolean areParametersValid(String tag, String tagCommitMessage, String wikiCommitMessage) {
    return tag && tag =~ /([0-9]+.[0-9]+.[0-9]+)/ && tagCommitMessage && wikiCommitMessage
}

void checkIfTagIsInUse(String tag) {
    String usedTagsStream = sh label: 'Already used tags',
            script: "git tag -l",
            returnStdout: true
    List<String> gitTags = usedTagsStream.split("\n")
    gitTags.each {
        if (it.trim().equals(tag)) {
            error("Tag: $tag is already used\nCurrently used tags are: $usedTagsStream")
        }
    }
}